# Report
## Statement
I hereby declare that this submission was created in its entirety by me and only me.

The implementation is based upon code from the Mandatory activity regarding implementing an Auction System.

## The Architecture of the system
The system consist of n amount of clients and 2 servers (nodes). Since the system had to implement passive replication, the leader is automatically the server running on port 3000. Since the clients knows this, they will automatically try to connect to that port. When a user inputs adds a word, it will start by calling the "LeaderAdd" method at the leader server. Then, the leader will start by sending the request to potential followers by calling "FollowerAdd", and afterwards adding to its own local dictionary. The same procedure goes for the client wanting to get a definition from the dictionary.

If the client fails to connect to the leader with port 3000, it will automatically try to connect to the server with the port 3001, and so on. The server having port 3001, will automatically recognize it is the leader, since its "Leader"-method has been called.

The leader connects to the follower each time an add or read operation has been called.

## Answers to questions
### A 
The system satisfies points 1-7 since it has an 'add' and 'read' operation, having the required parameters ('add' has two (a word and a definition) and 'read' has one (a definition)) and returns the required valuetypes ('read' returns a string and 'add' returns a boolean). Moreover, 'add' updates the dictionary at the requested entry with the new definition and returns a confirmation of whether it succeeded or not. 'read' accesses the entry specified by the given word and returns the value associated to the given word (its definition stored in the dictionary)

### B
Since the put function doesn't check wether a value already is stored on a key, the put function will overwrite any value placed on a given key. Therefore, the system will always take the value from the latest 'add'-operation performed on a given key. 

### C 
As described previously, the client knows who the leader is, since it starts by connecting to initial leader with the port 3000. This means, that the client will detect if that leader has crashed. If the leader has crash, the client will increment the port of the previous leader by one, and try to connect to that port. Since the only server left will have the port 3001, it will be connected to the client. Since the client always calls 'LeaderAdd' or 'LeaderRead' the server connected to the client, will automatically assume that it has become the leader, and will try to connect to the follower.

If the follower crashes, the leader will just take the result from its own dictionary, and return the result to the client. 

This makes the system tolerant to one crash-failure from either the leader or the follower.

### D
Since the system doesn't implement any physical clocks, it cannot satify the requirements for linearisability. However, the system does satify the requirements for Sequential Consistency, since the leader always will process the requests in the same order as the individual clients issued them.